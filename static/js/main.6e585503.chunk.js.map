{"version":3,"sources":["components/RichTextEditor.js","App.js","index.js"],"names":["RichTextEditor","props","state","editorState","EditorState","createEmpty","focus","refs","editor","onChange","setState","handleKeyCommand","_handleKeyCommand","bind","mapKeyToEditorCommand","_mapKeyToEditorCommand","toggleBlockType","_toggleBlockType","toggleInlineStyle","_toggleInlineStyle","command","newState","RichUtils","this","e","keyCode","getDefaultKeyBinding","newEditorState","onTab","blockType","inlineStyle","className","contentState","getCurrentContent","hasText","getBlockMap","first","getType","onToggle","onClick","blockStyleFn","getBlockStyle","customStyleMap","styleMap","keyBindingFn","placeholder","ref","spellCheck","React","Component","CODE","backgroundColor","fontFamily","fontSize","padding","block","StyleButton","preventDefault","style","active","onMouseDown","label","BLOCK_TYPES","BlockStyleControls","selection","getSelection","getBlockForKey","getStartKey","map","type","key","INLINE_STYLES","InlineStyleControls","currentStyle","getCurrentInlineStyle","has","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6e585503.chunk.js","sourcesContent":["import React from 'react';\nimport { Editor, EditorState, getDefaultKeyBinding, RichUtils} from 'draft-js';\nimport './RichTextEditor.css';\n// import 'draft-js/dist/Draft.css';\n\nclass RichTextEditor extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {editorState: EditorState.createEmpty()};\n\n      this.focus = () => this.refs.editor.focus();\n      this.onChange = (editorState) => this.setState({editorState});\n\n      this.handleKeyCommand = this._handleKeyCommand.bind(this);\n      this.mapKeyToEditorCommand = this._mapKeyToEditorCommand.bind(this);\n      this.toggleBlockType = this._toggleBlockType.bind(this);\n      this.toggleInlineStyle = this._toggleInlineStyle.bind(this);\n    }\n\n    _handleKeyCommand(command, editorState) {\n      const newState = RichUtils.handleKeyCommand(editorState, command);\n      if (newState) {\n        this.onChange(newState);\n        return true;\n      }\n      return false;\n    }\n\n    _mapKeyToEditorCommand(e) {\n      if (e.keyCode === 9 /* TAB */) {\n        const newEditorState = RichUtils.onTab(\n          e,\n          this.state.editorState,\n          4, /* maxDepth */\n        );\n        if (newEditorState !== this.state.editorState) {\n          this.onChange(newEditorState);\n        }\n        return;\n      }\n      return getDefaultKeyBinding(e);\n    }\n\n    _toggleBlockType(blockType) {\n      this.onChange(\n        RichUtils.toggleBlockType(\n          this.state.editorState,\n          blockType\n        )\n      );\n    }\n\n    _toggleInlineStyle(inlineStyle) {\n      this.onChange(\n        RichUtils.toggleInlineStyle(\n          this.state.editorState,\n          inlineStyle\n        )\n      );\n    }\n\n    render() {\n      const {editorState} = this.state;\n\n      // If the user changes block type before entering any text, we can\n      // either style the placeholder or hide it. Let's just hide it now.\n      let className = 'RichEditor-editor';\n      var contentState = editorState.getCurrentContent();\n      if (!contentState.hasText()) {\n        if (contentState.getBlockMap().first().getType() !== 'unstyled') {\n          className += ' RichEditor-hidePlaceholder';\n        }\n      }\n\n      return (\n        <div className=\"RichEditor-root\">\n          <BlockStyleControls\n            editorState={editorState}\n            onToggle={this.toggleBlockType}\n          />\n          <InlineStyleControls\n            editorState={editorState}\n            onToggle={this.toggleInlineStyle}\n          />\n          <div className={className} onClick={this.focus}>\n            <Editor\n              blockStyleFn={getBlockStyle}\n              customStyleMap={styleMap}\n              editorState={editorState}\n              handleKeyCommand={this.handleKeyCommand}\n              keyBindingFn={this.mapKeyToEditorCommand}\n              onChange={this.onChange}\n              placeholder=\"Tell a story...\"\n              ref=\"editor\"\n              spellCheck={true}\n            />\n          </div>\n        </div>\n      );\n    }\n  }\n\n  // Custom overrides for \"code\" style.\n  const styleMap = {\n    CODE: {\n      backgroundColor: 'rgba(0, 0, 0, 0.05)',\n      fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\n      fontSize: 16,\n      padding: 2,\n    },\n  };\n\n  function getBlockStyle(block) {\n    switch (block.getType()) {\n      case 'blockquote': return 'RichEditor-blockquote';\n      default: return null;\n    }\n  }\n\n  class StyleButton extends React.Component {\n    constructor() {\n      super();\n      this.onToggle = (e) => {\n        e.preventDefault();\n        this.props.onToggle(this.props.style);\n      };\n    }\n\n    render() {\n      let className = 'RichEditor-styleButton';\n      if (this.props.active) {\n        className += ' RichEditor-activeButton';\n      }\n\n      return (\n        <span className={className} onMouseDown={this.onToggle}>\n          {this.props.label}\n        </span>\n      );\n    }\n  }\n\n  const BLOCK_TYPES = [\n    {label: 'H1', style: 'header-one'},\n    {label: 'H2', style: 'header-two'},\n    {label: 'H3', style: 'header-three'},\n    {label: 'H4', style: 'header-four'},\n    {label: 'H5', style: 'header-five'},\n    {label: 'H6', style: 'header-six'},\n    {label: 'Blockquote', style: 'blockquote'},\n    {label: 'UL', style: 'unordered-list-item'},\n    {label: 'OL', style: 'ordered-list-item'},\n    {label: 'Code Block', style: 'code-block'},\n  ];\n\n  const BlockStyleControls = (props) => {\n    const {editorState} = props;\n    const selection = editorState.getSelection();\n    const blockType = editorState\n      .getCurrentContent()\n      .getBlockForKey(selection.getStartKey())\n      .getType();\n\n    return (\n      <div className=\"RichEditor-controls\">\n        {BLOCK_TYPES.map((type) =>\n          <StyleButton\n            key={type.label}\n            active={type.style === blockType}\n            label={type.label}\n            onToggle={props.onToggle}\n            style={type.style}\n          />\n        )}\n      </div>\n    );\n  };\n\n  var INLINE_STYLES = [\n    {label: 'Bold', style: 'BOLD'},\n    {label: 'Italic', style: 'ITALIC'},\n    {label: 'Underline', style: 'UNDERLINE'},\n    {label: 'Monospace', style: 'CODE'},\n  ];\n\n  const InlineStyleControls = (props) => {\n    const currentStyle = props.editorState.getCurrentInlineStyle();\n    \n    return (\n      <div className=\"RichEditor-controls\">\n        {INLINE_STYLES.map((type) =>\n          <StyleButton\n            key={type.label}\n            active={currentStyle.has(type.style)}\n            label={type.label}\n            onToggle={props.onToggle}\n            style={type.style}\n          />\n        )}\n      </div>\n    );\n  };\n\n  export default RichTextEditor;","import React, { Component } from 'react';\nimport './App.css';\nimport RichTextEditor from './components/RichTextEditor';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Rich Text Editor Example</h1>\n        <h3>Created with Draft.Js</h3>\n        <RichTextEditor />\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}